/*
/mob/living/exosuit
	movement_handlers = list(
		/datum/movement_handler/mob/delay/exosuit,
		/datum/movement_handler/mob/space/exosuit,
		/datum/movement_handler/mob/multiz,
		/datum/movement_handler/mob/exosuit
	)*/

/mob/living/exosuit/Move()
	. = ..()
	if(. && !istype(loc, /turf/open/space))
		playsound(src.loc, legs.mech_step_sound, 40, 1)




/mob/living/exosuit/relaymove(mob/living/user, direction)
	var/move_result = 0
	var/oldloc = loc
	if(!legs)
		to_chat(pilots, span_warning("\The [src] has no means of propulsion!"))
		return FALSE
	var/move_delay = legs.move_delay
	var/turn_delay = legs.turn_delay
	if(maintenance_protocols)
		to_chat(pilots, span_warning("Maintenance protocols are in effect."))
		return FALSE
	var/obj/item/stock_parts/cell/C = get_cell()
	if(legs.leg_damaged)
		move_delay = move_delay * 2
		turn_delay = turn_delay * 2
	if(!C || !C.charge > legs.power_use)
		to_chat(pilots, span_warning("The power indicator flashes briefly."))
		return FALSE
	if(can_move >= world.time)
		return FALSE
	if(dir != direction)
		move_result = mechturn(direction)
		can_move = world.time + turn_delay
		return 1
	else
		if(legs.damage_state == MECH_COMPONENT_DAMAGE_DESTORYED)
			to_chat(pilots, span_warning("The actuator is damaged and cannot move."))
			return FALSE
		set_glide_size(DELAY_TO_GLIDE_SIZE(move_delay))
		move_result = mechstep(direction)
	if(move_result || loc != oldloc)// halfway done diagonal move still returns false
		C.use(legs.power_use)
		can_move = world.time + move_delay
		return 1


/mob/living/exosuit/proc/mechstep(direction)
	. = step(src,direction)
/mob/living/exosuit/proc/mechturn(direction)
	setDir(direction)
