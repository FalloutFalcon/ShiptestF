/mob/living/exosuit/ex_act(severity)
	if (status_flags & GODMODE)
		return
	var/b_loss = 0
	var/f_loss = 0
	switch (severity)
		if (EXPLODE_DEVASTATE)
			b_loss = 200
			f_loss = 200
		if (EXPLODE_HEAVY)
			b_loss = 90
			f_loss = 90
		if(EXPLODE_LIGHT)
			b_loss = 45

	// spread damage overall
	apply_damage(b_loss, BURN, null, spread_damage=TRUE)
	apply_damage(f_loss, BURN, null, spread_damage=TRUE)

/mob/living/exosuit/apply_effect(effect = 0, effecttype = EFFECT_STUN, blocked = 0)
	if(!effect || (blocked >= 100))
		return 0
	if (!(effecttype in list(EFFECT_STUTTER, EFFECT_EYE_BLUR, EFFECT_DROWSY, EFFECT_STUN)))
		. = ..()


/mob/living/exosuit/attacked_by(obj/item/I, mob/living/user)
	if(!I.force)
		user.visible_message(span_notice("\The [user] bonks \the [src] harmlessly with \the [I]."))
		return

	apply_damage(I.force, I.damtype,def_zone = user.zone_selected, break_modifier = I.force, sharpness = I.get_sharpness(),) //Bone break modifier = item force

	/*
	switch(def_zone)
		if(BODY_ZONE_HEAD , BODY_ZONE_CHEST, BODY_ZONE_PRECISE_MOUTH, BODY_ZONE_PRECISE_EYES)
			if(LAZYLEN(pilots) && (!hatch_closed || !prob(body.pilot_coverage)))
				var/mob/living/pilot = pick(pilots)
				var/zone = pilot.resolve_item_attack(I, user, def_zone)
				if(zone)
					var/datum/attack_result/AR = new()
					AR.hit_zone = zone
					AR.attackee = pilot
					return AR*/

	return TRUE //Careful with effects, mechs shouldn't be stunned

/mob/living/exosuit/hitby(atom/movable/AM, skipcatch, hitpush, blocked, datum/thrownthing/throwingdatum)
	if (!hatch_closed && (LAZYLEN(pilots) < length(body.pilot_positions)))
		var/mob/living/M = AM
		if (istype(M))
			var/chance = 50 //Throwing someone at an empty exosuit MAY put them in the seat
			var/message = "\The [AM] lands in \the [src]'s cockpit with a crash. Get in the damn exosuit!"
			if (throwingdatum.thrower == throwingdatum.thrownthing)
				//This is someone jumping
				chance = 5
				message = "\The [AM] gets in \the [src]'s cockpit in one fluid motion."
			if (prob(chance))
				if (enter(AM, silent = TRUE, check_incap = FALSE, instant = TRUE))
					visible_message(span_notice("[message]"))
					return

	if (LAZYLEN(pilots) && (!hatch_closed || !prob(body.pilot_coverage)))
		var/mob/living/pilot = pick(pilots)
		return pilot.hitby(AM, throwingdatum)
	handle_hud_icons()
	. = ..()

/mob/living/exosuit/bullet_act(obj/projectile/P, def_zone, used_weapon)
	if(src.pilots)
		if(P.firer == src.pilots[1])
			return BULLET_ACT_FORCE_PIERCE
	switch(def_zone)
		if(BODY_ZONE_HEAD , BODY_ZONE_CHEST, BODY_ZONE_PRECISE_MOUTH, BODY_ZONE_PRECISE_EYES)
			if(LAZYLEN(pilots) && (!hatch_closed || !prob(body.pilot_coverage)))
				var/mob/living/pilot = pick(pilots)
				return pilot.bullet_act(P, def_zone, used_weapon)
	..()

/mob/living/exosuit/updatehealth()
	maxHealth = body ? body.mech_health : 0
	health = maxHealth-(getFireLoss()+getBruteLoss())
	handle_hud_icons()

/mob/living/exosuit/proc/take_burn(amount, obj/item/mech_component/MC = pick(list(arms, legs, body, head)))
	if(MC)
		MC.take_burn_damage(amount)
		MC.update_health()

/mob/living/exosuit/proc/take_brute(amount, obj/item/mech_component/MC = pick(list(arms, legs, body, head)))
	if(MC)
		MC.take_brute_damage(amount)
		MC.update_health()

/mob/living/exosuit/proc/zoneToComponent(zone)
	switch(zone)
		if(BODY_ZONE_PRECISE_EYES , BODY_ZONE_HEAD)
			return head
		if(BODY_ZONE_L_ARM , BODY_ZONE_R_ARM)
			return arms
		if(BODY_ZONE_L_LEG , BODY_ZONE_R_LEG)
			return legs
		else
			return body

/mob/living/exosuit/apply_damage(damage = 0,damagetype = BRUTE, def_zone = null, blocked = FALSE, forced = FALSE, spread_damage = FALSE, break_modifier = 1, sharpness = FALSE)
	if(!damage)
		return 0
	if(!def_zone)
		if(spread_damage)
			var/old_damage = damage
			var/tally
			for(var/obj/item/part in list(arms, legs, body, head))
				tally += part.w_class
			for(var/obj/item/part in list(arms, legs, body, head))
				damage = old_damage * part.w_class/tally
				def_zone = BODY_ZONE_CHEST
				if(part == arms)
					def_zone = BODY_ZONE_L_ARM
				else if(part == legs)
					def_zone = BODY_ZONE_L_LEG
				else if(part == head)
					def_zone = BODY_ZONE_HEAD

				. = .() || .
			return

		def_zone = ran_zone(def_zone, probability=100)


	//var/list/after_armor = modify_damage_by_armor(def_zone, damage, damagetype, damage_flags, src, armor_pen, TRUE)
	//damage = after_armor[1]
	//damagetype = after_armor[2]

	if(!damage)
		return 0

	var/target = zoneToComponent(def_zone)
	//Only 3 types of damage concern mechs and vehicles
	switch(damagetype)
		if (BRUTE)
			take_brute(damage, target)
		if (BURN)
			take_burn(damage, target)
		if (CLONE)
			for(var/mob/living/pilot in pilots)
				pilot.apply_damage(damage, CLONE, def_zone)

	if ((damagetype == BRUTE || damagetype == BURN) && prob(25+(damage*2)))
		sparks.set_up(3,0,src)
		sparks.start()
	updatehealth()

	return 1

/mob/living/exosuit/rad_act(severity)
	return FALSE // Pilots already query rads, modify this for radiation alerts and such



/mob/living/exosuit/getFireLoss()
	var/total = 0
	for(var/obj/item/mech_component/MC in list(arms, legs, body, head))
		if(MC)
			total += MC.burn_damage
	return total

/mob/living/exosuit/getBruteLoss()
	var/total = 0
	for(var/obj/item/mech_component/MC in list(arms, legs, body, head))
		if(MC)
			total += MC.brute_damage
	return total



/mob/living/exosuit/getarmor(def_zone, type)		//WS edit begin - Whitesands
	if(armor)
		return armor.getRating(type)
	return 0		// If no armor		//WS edit end
