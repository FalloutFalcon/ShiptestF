// A lot of this is copied from floodlights.
/obj/item/mech_equipment/light
	name = "floodlight"
	desc = "An exosuit-mounted light."
	icon_state = "mech_floodlight"
	item_state = "mech_floodlight"
	restricted_hardpoints = list(HARDPOINT_HEAD, HARDPOINT_LEFT_SHOULDER, HARDPOINT_RIGHT_SHOULDER)

	light_system = MOVABLE_LIGHT_DIRECTIONAL
	light_range = 6
	light_power = 2
	light_on = FALSE
	var/on = 0


/obj/item/mech_equipment/light/installed(mob/living/exosuit/_owner)
	. = ..()
	update_icon()

/obj/item/mech_equipment/light/attack_self(mob/user)
	. = ..()
	if(.)
		toggle()
		to_chat(user, "You switch \the [src] [on ? "on" : "off"].")

/obj/item/mech_equipment/light/proc/toggle()
	on = !on
	update_icon()
	owner.update_icon()
	active = on
	passive_power_use = on ? 0.1  : 0

/obj/item/mech_equipment/light/deactivate()
	if(on)
		toggle()
	..()

/obj/item/mech_equipment/light/during_update_icon()
	if(on)
		icon_state = "[initial(icon_state)]-on"
	else
		icon_state = "[initial(icon_state)]"
	set_light_on(on)
	if(light_system == STATIC_LIGHT)
		update_light()

	// Check our layers
	if(owner && (owner.hardpoints[HARDPOINT_HEAD] == src))
		mech_layer = MECH_INTERMEDIATE_LAYER
	else mech_layer = initial(mech_layer)

#define CATAPULT_SINGLE 1
#define CATAPULT_AREA 2

/obj/item/mech_equipment/catapult
	name = "gravitational catapult"
	desc = "An exosuit-mounted gravitational catapult."
	icon_state = "mech_wormhole"
	restricted_hardpoints = list(HARDPOINT_LEFT_HAND, HARDPOINT_RIGHT_HAND)
	//restricted_software = list(MECH_SOFTWARE_UTILITY)
	var/mode = CATAPULT_SINGLE
	var/atom/movable/locked
	equipment_delay = 0.3 SECONDS
	require_adjacent = FALSE

	var/activated_passive_power = 1
	/// For when targetting a single object, will create a warp beam
	var/datum/beam/beam
	var/max_dist = 6
	var/obj/effect/warp/small/warpeffect = null
	var/test_iconstate = "light_beam"
	var/obj/effect/grav/effect_aura

/obj/effect/grav
	icon_state = "ion_fade_flight"
	layer = ABOVE_MOB_LAYER
	var/atom/attached_to
/obj/effect/grav/Initialize(mapload)
	. = ..()
	attach(loc)
	START_PROCESSING(SSfastprocess, src)

/obj/effect/grav/proc/attach(atom/A)
	attached_to = A
	forceMove(get_turf(A))

/obj/effect/grav/Destroy(force)
	START_PROCESSING(SSfastprocess, src)
	attached_to = null
	. = ..()
/obj/effect/grav/process()
	if(!attached_to || QDELETED(attached_to))
		qdel(src)
	forceMove(get_turf(attached_to))


/obj/ebeam/warp

/obj/effect/warp/small
	appearance_flags = PIXEL_SCALE | NO_CLIENT_COLOR
	icon = 'icons/effects/96x96.dmi'
	icon_state = "singularity_s3"
	pixel_x = -32
	pixel_y = -32

/obj/item/mech_equipment/catapult/proc/beamdestroyed()
	if(beam)
		beam = null
	if(locked)
		if(owner)
			for(var/pilot in owner.pilots)
				to_chat(pilot, span_notice("Lock on \the [locked] disengaged."))
		endanimation()
		locked = null
	//It's possible beam self destroyed, match active
	if(active)
		deactivate()

/obj/item/mech_equipment/catapult/proc/endanimation()
	if(locked)
		animate(locked,pixel_y= initial(locked.pixel_y), time = 0)

/obj/item/mech_equipment/catapult/get_hardpoint_maptext()
	var/string
	if(locked)
		string = locked.name + " - "
	if(mode == 1)
		string += "Pull"
	else string += "Push"
	return string

/obj/item/mech_equipment/catapult/deactivate()
	. = ..()
	if(beam)
		QDEL_NULL(beam)
	if(effect_aura)
		qdel(effect_aura)
	passive_power_use = 0

/obj/item/mech_equipment/catapult/attack_self(mob/user)
	. = ..()
	if(.)
		if(!locked)
			mode = mode == CATAPULT_SINGLE ? CATAPULT_AREA : CATAPULT_SINGLE
			to_chat(user, span_notice("You set \the [src] to [mode == CATAPULT_SINGLE ? "single" : "multi"]-target mode."))
			update_icon()
		else
			to_chat(user, span_notice("You cannot change the mode \the [src] while it is locked on to a target."))
/obj/item/mech_equipment/catapult/process()
	.=..()
	beam.redrawing()
/obj/item/mech_equipment/catapult/afterattack(atom/target, mob/living/user, inrange, params)
	if(..())
		switch(mode)
			if(CATAPULT_SINGLE)
				if(!locked && (get_dist(owner, target) <= max_dist))
					var/atom/movable/AM = target
					if(!istype(AM) || AM.anchored)
						to_chat(user, span_notice("Unable to lock on [target]."))
						return
					locked = AM
					beam = owner.Beam(target, icon_state = test_iconstate)
					effect_aura = new /obj/effect/grav(target)

					animate(target,pixel_y= initial(target.pixel_y) - 2,time=1 SECONDS, easing = SINE_EASING, flags = ANIMATION_PARALLEL, loop = -1)
					animate(pixel_y= initial(target.pixel_y) + 2,time=1 SECONDS)

					active = TRUE
					passive_power_use = activated_passive_power
					to_chat(user, span_notice("Locked on [AM]."))
					return
				else if(target != locked)
					if(locked in view(owner))
						endanimation() //End animation without waiting for delete, so throw won't be affected
						locked.throw_at(target, 14, 1.5, owner)
						locked = null
						deactivate()

						var/obj/item/stock_parts/cell/C = owner.get_cell()
						if(istype(C))
							C.use(active_power_use)

					else
						deactivate()
			if(CATAPULT_AREA)
				if(!warpeffect)
					warpeffect = new

				//effect and sound
				warpeffect = new /obj/effect/warp/small(get_turf(target))
				//warpeffect.SetTransform(scale = 0)
				warpeffect.alpha = 255
				animate(
					warpeffect,
					transform = matrix(),
					alpha = 0,
					time = 1.25 SECONDS
				)
				addtimer(CALLBACK(warpeffect, /atom/movable/proc/forceMove, src), 1.25 SECONDS)
				//playsound(warpeffect, 'sound/effects/heavy_cannon_blast.ogg', 50, 1)

				var/list/atoms = list()
				if(isturf(target))
					atoms = range(target,3)
				else
					atoms = orange(target,3)
				for(var/atom/movable/A in atoms)
					if(A.anchored) continue
					var/dist = 5-get_dist(A,target)
					A.throw_at(get_edge_target_turf(A,get_dir(target, A)),dist,0.7)

				var/obj/item/stock_parts/cell/C = owner.get_cell()
				if(istype(C))
					C.use(active_power_use * 2) //bit more expensive to throw all
	owner.handle_hud_icons()


#undef CATAPULT_SINGLE
#undef CATAPULT_AREA


/obj/item/mech_equipment/ionjets
	name = "exosuit maneuvering unit"
	desc = "A testament to the fact that sometimes more is actually more. These oversized electric resonance boosters allow exosuits to move in microgravity and can even provide brief speed boosts. The stabilizers can be toggled with ctrl-click."
	icon_state = "mech_jet_off"
	restricted_hardpoints = list(HARDPOINT_BACK)
	//restricted_software = list(MECH_SOFTWARE_UTILITY)
	active_power_use = 90
	passive_power_use = 0
	equipment_delay = 1 SECONDS
	var/activated_passive_power = 2
	var/movement_power = 75
	//origin_tech = list(TECH_ENGINEERING = 3, TECH_MAGNET = 3, TECH_PHORON = 3)
	var/datum/effect/trail/ion/ion_trail
	require_adjacent = FALSE
	var/stabilizers = FALSE
	var/slide_distance = 10

/obj/item/mech_equipment/ionjets/Initialize()
	. = ..()
	//ion_trail = new /datum/effect/trail/ion()
	//ion_trail.set_up(src)

/obj/item/mech_equipment/ionjets/proc/allowSpaceMove()
	if (!active)
		return FALSE

	var/obj/item/stock_parts/cell/C = owner.get_cell()
	if (istype(C))
		if (C -= (movement_power) > 0)
			return TRUE
		else
			deactivate()

	return FALSE

/obj/item/mech_equipment/ionjets/attack_self(mob/user)
	. = ..()
	if (!.)
		return

	if (active)
		deactivate()
	else
		activate()

/obj/item/mech_equipment/ionjets/CtrlClick(mob/user)
	if (owner && ((user in owner.pilots) || user == owner))
		if (active)
			stabilizers = !stabilizers
			to_chat(user, span_notice("You toggle the stabilizers [stabilizers ? "on" : "off"]"))
		return TRUE
	return ..()

/obj/item/mech_equipment/ionjets/proc/activate()
	passive_power_use = activated_passive_power
	//ion_trail.start()
	active = TRUE
	update_icon()

/obj/item/mech_equipment/ionjets/deactivate()
	. = ..()
	passive_power_use = 0
	//ion_trail.stop()
	update_icon()

/obj/item/mech_equipment/ionjets/during_update_icon()
	if (active)
		icon_state = "mech_jet_on"
		set_light(1, 1, l_color = COLOR_CYAN)
	else
		icon_state = "mech_jet_off"
		set_light(0)
	if(owner)
		owner.update_icon()

/obj/item/mech_equipment/ionjets/get_hardpoint_maptext()
	if (active)
		return "ONLINE - Stabilizers [stabilizers ? "on" : "off"]"
	else return "OFFLINE"

/obj/item/mech_equipment/ionjets/proc/slideCheck(turf/target)
	if (owner && istype(target))
		if ((get_dist(owner, target) <= slide_distance) && (get_dir(get_turf(owner), target) == owner.dir))
			return TRUE
	return FALSE

/obj/item/mech_equipment/ionjets/afterattack(atom/target, mob/living/user, inrange, params)
	. = ..()
	if (. && active)
		if (owner.z != target.z)
			to_chat(user, span_warning("You cannot reach that level!"))
			return FALSE
		var/turf/TT = get_turf(target)
		if (slideCheck(TT))
			playsound(src, 'sound/magic/forcewall.ogg', 30, 1)
			owner.visible_message(
				span_warning("\The [src] charges up in preparation for a slide!"),
				blind_message = span_warning("You hear a loud hum and an intense crackling.")
			)
			//new /obj/effect(get_step(owner.loc, reverse_direction(owner.dir)), 2 SECONDS, 'icons/effects/effects.dmi',"cyan_sparkles")
			equipment_delay = 4 SECONDS
			owner.visible_message(span_danger("Burning hard, \the [owner] thrusts forward!"))
			owner.throw_at(get_ranged_target_turf(owner, owner.dir, slide_distance), slide_distance, 3, owner, FALSE)
			addtimer(CALLBACK(src, PROC_REF(reset_cooldown)), 1 SECONDS)

		else
			to_chat(user, span_warning("You cannot slide there!"))
