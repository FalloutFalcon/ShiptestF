
/obj/item/mech_equipment/atmos_shields
	icon_state = "mech_atmoshield_off"
	name = "exosuit airshield"
	desc = "An Aether Atmospherics brand 'Zephyros' portable Atmospheric Isolation and Retention Screen. It keeps air where it should be... Most of the time. Press ctrl-click to switch modes"
	restricted_hardpoints = list(HARDPOINT_BACK)
	//restricted_software = list(MECH_SOFTWARE_ENGINEERING)
	var/list/segments
	equipment_delay = 0.25 SECONDS
	var/current_mode = 0  //0 barrier, 1 bubble
	var/shield_range = 2

/obj/item/mech_equipment/atmos_shields/CtrlClick(mob/user)
	if (owner && ((user in owner.pilots) || user == owner))
		if (active)
			to_chat(user, span_warning("You cannot modify the projection mode while the shield is active."))
		else
			current_mode = !current_mode
			to_chat(user, span_notice("You set the shields to [current_mode ? "bubble" : "barrier"] mode."))
		return TRUE
	return ..()

/obj/mech_shield
	name = "energy shield"
	desc = "A thin energy shield. It doesn't look like it could much."
	icon = 'modular_pentest/modules/bay_mech/icons/shielding.dmi'
	icon_state = "shield_normal"
	anchored = TRUE
	layer = ABOVE_MOB_LAYER
	density = FALSE
	invisibility = 0
	CanAtmosPass = ATMOS_PASS_NO
	var/obj/item/mech_equipment/atmos_shields/shields
	color = COLOR_BLUE_LIGHT

/obj/mech_shield/Initialize()
	. = ..()
	set_light(1, 0.8, COLOR_BLUE_LIGHT)

/obj/mech_shield/Destroy()
	if(shields)
		if(length(shields.segments))
			shields.segments -= src
		shields = null
	CanAtmosPass = ATMOS_PASS_YES

	. = ..()

/obj/item/mech_equipment/atmos_shields/get_hardpoint_maptext()
	return "[current_mode ? "BUBBLE" : "BARRIER"]\n[active ? "ONLINE" : "OFFLINE"]"

/obj/item/mech_equipment/atmos_shields/proc/on_moved()
	if(active)
		deactivate()

/obj/item/mech_equipment/atmos_shields/proc/on_turned()
	if(active && !current_mode)
		deactivate()

/obj/item/mech_equipment/atmos_shields/proc/activate()
	owner.visible_message(span_warning("\The [src] starts glowing as it becomes energized!"), blind_message = span_warning("You hear the crackle of electricity"))
	owner.changeNext_move(2.5 SECONDS)
	if (do_after(owner, 0.5 SECONDS, get_turf(owner)) && owner)
		owner.visible_message(span_warning("The air shimmers as energy shields form in front of \the [owner]!"))
		playsound(src ,'sound/effects/phasein.ogg',35,1)
		active = TRUE
		var/list/turfs = list()

		if(current_mode) //Generate a bubble
			var/turf/T = null
			for (var/x_offset = -shield_range +1; x_offset <= shield_range -1; x_offset++)
				T = locate(owner.x + x_offset, owner.y - shield_range, owner.z)
				if(T)
					turfs += T
				T = locate(owner.x + x_offset, owner.y + 2, owner.z)
				if(T)
					turfs += T

			for (var/y_offset = -shield_range+1; y_offset < shield_range; y_offset++)
				T = locate(owner.x - shield_range, owner.y + y_offset, owner.z)
				if(T)
					turfs += T
				T = locate(owner.x + shield_range, owner.y + y_offset, owner.z)
				if(T)
					turfs += T
		else
			var/front = get_step(get_turf(owner), owner.dir)
			turfs += front
			turfs += get_step(front, turn(owner.dir, -90))
			turfs += get_step(front, turn(owner.dir,  90))

		segments = list()
		for(var/turf/T in turfs)
			var/obj/mech_shield/MS = new(T)
			if(istype(MS))
				MS.shields = src
				segments += MS

		passive_power_use = 0.8

		update_icon()
		owner.update_icon()

/obj/item/mech_equipment/atmos_shields/during_update_icon()
	icon_state = "mech_atmoshield[active ? "_on" : "_off"]"

/obj/item/mech_equipment/atmos_shields/deactivate()
	for(var/obj/mech_shield/MS in segments)
		if(istype(MS))
			if(length(segments))
				owner.visible_message(span_warning("The energy shields in front of \the [owner] disappear!"))
				qdel(MS)

	passive_power_use = 0
	. = ..()
	update_icon()
	owner.update_icon()

/obj/item/mech_equipment/atmos_shields/attack_self(mob/user)
	. = ..()
	if(.)
		if(active)
			deactivate()
		else
			activate()
		to_chat(user, span_notice("You toggle \the [src] [active ? "on" : "off"]"))
