// Defining all of this here so it's centralized.
// Used by the exosuit HUD to get a 1-10 value representing charge, ammo, etc.
/obj/item/mech_equipment
	name = "exosuit hardpoint system"
	icon = 'modular_pentest/modules/bay_mech/icons/mech_equipment.dmi'
	icon_state = ""
	force = 10

	var/list/restricted_hardpoints
	var/mob/living/exosuit/owner
	var/list/restricted_software
	var/equipment_delay = 0
	var/active_power_use = 1  // How much does it consume to perform and accomplish usage
	var/passive_power_use = 0          // For gear that for some reason takes up power even if it's supposedly doing nothing (mech will idly consume power)
	var/mech_layer = MECH_GEAR_LAYER //For the part where it's rendered as mech gear
	var/require_adjacent = TRUE
	var/active = FALSE //For gear that has an active state (ie, floodlights)
	var/mounted_location
	var/on_cooldown = FALSE

/obj/item/mech_equipment/afterattack(atom/target, mob/living/user, inrange, params)
	if(require_adjacent)
		if(!inrange)
			return 0
	if (owner && loc == owner && ((user in owner.pilots) || user == owner))
		if(target in owner.contents)
			return 0

		if(!((owner.get_cell()?.charge - active_power_use)>0))
			to_chat(user, span_warning("The power indicator flashes briefly as you attempt to use \the [src]"))
			return 0
		return 1
	else
		return 0
/obj/item/mech_equipment/proc/handle_cooldown(state)
	on_cooldown = TRUE
	addtimer(CALLBACK(src, PROC_REF(set_ready_state), FALSE), equipment_delay)

/obj/item/mech_equipment/proc/set_ready_state(state)
	on_cooldown = state
/obj/item/mech_equipment/attack_self(mob/user)
	if (owner && loc == owner && ((user in owner.pilots) || user == owner))
		if(!((owner.get_cell()?.charge - active_power_use)>0))
			to_chat(user, span_warning("The power indicator flashes briefly as you attempt to use \the [src]"))
			return 0
		return 1
	else
		return 0

/obj/item/mech_equipment/examine(mob/user, distance)
	. = ..()

	if(length(restricted_software))
		to_chat(user, span_notice("It seems it would require [english_list(restricted_software)] to be used."))
	if(length(restricted_hardpoints))
		to_chat(user, span_notice("You figure it could be mounted in the [english_list(restricted_hardpoints)]."))

/obj/item/mech_equipment/proc/deactivate()
	active = FALSE
	return

/obj/item/mech_equipment/proc/installed(mob/living/exosuit/_owner)
	owner = _owner
	//generally attached. Nothing should be able to grab it
	//canremove = FALSE

/obj/item/mech_equipment/proc/uninstalled()
	if(active)
		deactivate()
	owner = null
	//canremove = TRUE

/obj/item/mech_equipment/proc/wreck() //Module has been destroyed
	return

/obj/item/mech_equipment/Destroy()
	owner = null
	. = ..()

/obj/item/mech_equipment/proc/get_effective_obj()
	return src

/obj/item/mech_equipment/proc/MouseDragInteraction(src_object, over_object, src_location, over_location, src_control, over_control, params, mob/user)
	//Get intent updated
	if(user != owner)
		owner.a_intent = user.a_intent
/obj/item/mech_equipment/proc/reset_cooldown()
	equipment_delay = initial(equipment_delay)

/obj/item/mech_equipment/mounted_system
	var/holding_type
	var/obj/item/holding
	///CURRENTLY ONLY FOR GUNS!
	var/autofire = FALSE
	//var/af_delay = 0.1
/obj/item/mech_equipment/mounted_system/attack_self(mob/user)
	. = ..()
	if(. && holding)
		return holding.attack_self(user)

/obj/item/mech_equipment/mounted_system/proc/forget_holding()
	if(holding) //It'd be strange for this to be called with this var unset
		holding = null
		qdel(src)

/obj/item/mech_equipment/mounted_system/Initialize()
	. = ..()
	if(holding_type)
		holding = new holding_type(src)
	if(holding)
		if(!icon_state)
			icon = holding.icon
			icon_state = holding.icon_state
		src.name = holding.name
		desc = "[holding.desc] This one is suitable for installation on an exosuit."


/obj/item/mech_equipment/mounted_system/Destroy()
	if(holding)
		QDEL_NULL(holding)
	. = ..()


/obj/item/mech_equipment/mounted_system/get_effective_obj()
	return (holding ? holding : src)

/obj/item/mech_equipment/mounted_system/get_hardpoint_status_value()
	return (holding ? holding.get_hardpoint_status_value() : null)

/obj/item/mech_equipment/mounted_system/get_hardpoint_maptext()
	return (holding ? holding.get_hardpoint_maptext() : null)

/obj/item/proc/get_hardpoint_status_value()
	return null

/obj/item/proc/get_hardpoint_maptext()
	return null

/obj/item/mech_equipment/mounted_system/get_cell()
	if(owner && loc == owner)
		return owner.get_cell()
	return null

//Used for reloading weapons/tools etc. that use some form of resource
/obj/item/mech_equipment/proc/rearm()
	return 0
