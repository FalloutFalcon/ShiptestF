/obj/item/mech_equipment/shields
	name = "exosuit shield droid"
	desc = "The Hephaestus Armature system is a well liked energy deflector system designed to stop any projectile before it has a chance to become a threat."
	icon_state = "shield_droid"
	var/obj/aura/mechshield/aura = null
	var/max_charge = 200
	var/charge = 200
	var/last_recharge = 0
	var/charging_rate = 1000
	var/cooldown = 3.5 SECONDS
	var/charge_increase = 10
	restricted_hardpoints = list(HARDPOINT_BACK)
	//restricted_software = list(MECH_SOFTWARE_WEAPONS)

/obj/item/mech_equipment/shields/installed(mob/living/exosuit/c)
	. = ..()
	aura = new(owner, src)
	RegisterSignal(owner, COMSIG_ATOM_DIR_CHANGE, PROC_REF(update_dir))
	START_PROCESSING(SSobj, src)

/obj/item/mech_equipment/shields/uninstalled()
	STOP_PROCESSING(SSobj, src)
	UnregisterSignal(owner, COMSIG_ATOM_DIR_CHANGE)
	QDEL_NULL(aura)
	. = ..()

/obj/item/mech_equipment/shields/attack_self(mob/user)
	. = ..()
	if(.)
		toggle()
/obj/item/mech_equipment/shields/proc/update_dir(datum/source, old_dir, new_dir)
	if(aura.active)
		if(istype(loc, /mob/living/exosuit))
			aura.setDir(new_dir)

/obj/item/mech_equipment/shields/proc/stop_damage(damage)
	var/difference = damage - charge
	charge = clamp(charge - damage, 0, max_charge)
	last_recharge = world.time
	owner.handle_hud_icons()
	if(difference > 0)
		for(var/mob/pilot in owner.pilots)
			to_chat(pilot, span_danger("Warning: Deflector shield failure detect, shutting down"))
		toggle()
		//playsound(owner.loc,'sound/mecha/internaldmgalarm.ogg',35,1)
		return difference
	else return 0

/obj/item/mech_equipment/shields/proc/toggle()
	if(!aura)
		return
	aura.toggle()
	playsound(owner,'sound/weapons/flash.ogg',35,1)
	update_icon()
	active = aura.active
	passive_power_use = active ? 1 : 0
	owner.update_icon()

/obj/item/mech_equipment/shields/deactivate()
	if(active)
		toggle()
	..()

/obj/item/mech_equipment/shields/during_update_icon()
	if(!aura)
		return
	if(aura.active)
		icon_state = "shield_droid_a"
	else
		icon_state = "shield_droid"

/obj/item/mech_equipment/shields/process()
	if(charge >= max_charge)
		return
	if((world.time - last_recharge) < cooldown)
		return
	var/obj/item/stock_parts/cell/cell = owner.get_cell()

	var/actual_required_power = clamp(max_charge - charge, 0, charging_rate)
	if(cell)
		charge += cell.use(actual_required_power) * charge_increase

/obj/item/mech_equipment/shields/get_hardpoint_status_value()
	return charge / max_charge

/obj/item/mech_equipment/shields/get_hardpoint_maptext()
	return "[(aura && aura.active) ? "ONLINE" : "OFFLINE"]: [round((charge / max_charge) * 100)]%"

/obj/aura/mechshield
	icon = 'modular_pentest/modules/bay_mech/icons/shield.dmi'
	name = "mechshield"
	var/obj/item/mech_equipment/shields/shields = null
	var/active = 0
	layer = ABOVE_MOB_LAYER
	var/north_layer = MECH_UNDER_LAYER
	pixel_x = 8
	pixel_y = 4
	mouse_opacity = 0

/obj/aura/mechshield/Initialize(maploading, obj/item/mech_equipment/shields/holder)
	. = ..()
	shields = holder

/obj/aura/mechshield/added_to(mob/living/target)
	. = ..()
	setDir()

/obj/aura/mechshield/proc/update_dir(user, old_dir, dir)
	setDir(dir)

/obj/aura/mechshield/setDir(new_dir)
	. = ..()
	if(dir == NORTH)
		layer = north_layer
	else layer = initial(layer)

/obj/aura/mechshield/Destroy()
	shields = null
	. = ..()

/obj/aura/mechshield/proc/toggle()
	active = !active

	update_icon()

	if(active)
		flick("shield_raise", src)
	else
		flick("shield_drop", src)


/obj/aura/mechshield/during_update_icon()
	if(active)
		icon_state = "shield"
	else
		icon_state = "shield_null"

/obj/aura/mechshield/aura_check_bullet(obj/projectile/proj, def_zone)
	var/mob/living/exosuit/exo = user
	if(exo.pilots)
		if(proj.firer == exo.pilots[1])
			return AURA_FALSE | AURA_CANCEL
	if (active && shields?.charge)
		proj.damage = shields.stop_damage(proj.damage)
		user.visible_message(span_warning("\The [shields.owner]'s shields flash and crackle."))
		flick("shield_impact", src)
		qdel(proj)
		//playsound(user,'sound/effects/basscannon.ogg',35,1)
		//new /obj/effect/smoke/illumination(user.loc, 5, 4, 1, "#ffffff")
		if (proj.damage <= 0)
			return AURA_FALSE|AURA_CANCEL

		var/datum/effect_system/spark_spread/spark_system = new /datum/effect_system/spark_spread()
		spark_system.set_up(5, 0, user)
		spark_system.start()
		playsound(loc, "sparks", 25, 1)
	return EMPTY_BITFIELD

/obj/aura/mechshield/aura_check_thrown(atom/movable/thrown_atom, datum/thrownthing/thrown_datum)
	. = ..()
	if (active && shields?.charge && thrown_datum.speed <= 5)
		user.visible_message(span_warning("\The [shields.owner]'s shields flash briefly as they deflect \the [thrown_atom]."))
		flick("shield_impact", src)
		//playsound(user, 'sound/effects/basscannon.ogg', 10, TRUE)
		return AURA_FALSE|AURA_CANCEL


//Ballistic shield
/obj/item/mech_equipment/ballistic_shield
	name = "exosuit ballistic shield"
	desc = "The Hephaestus Bulwark is a formidable line of defense that sees widespread use in planetary peacekeeping operations and military formations alike."
	icon_state = "mech_shield" //Rendering is handled by aura due to layering issues: TODO, figure out a better way to do this
	var/obj/aura/mech_ballistic/aura = null
	var/last_push = 0
	var/chance = 60 //For attacks from the front, diminishing returns
	var/last_max_block = 0 //Blocking during a perfect block window resets this, else there is an anti spam
	var/max_block = 60 // Should block most things
	var/blocking = FALSE
	restricted_hardpoints = list(HARDPOINT_LEFT_HAND, HARDPOINT_RIGHT_HAND)
	//restricted_software = list(MECH_SOFTWARE_UTILITY)

/obj/item/mech_equipment/ballistic_shield/installed(mob/living/exosuit/_owner)
	. = ..()
	aura = new(owner, src)
	RegisterSignal(owner, COMSIG_ATOM_DIR_CHANGE, PROC_REF(update_dir))

/obj/item/mech_equipment/ballistic_shield/uninstalled()
	QDEL_NULL(aura)
	UnregisterSignal(owner, COMSIG_ATOM_DIR_CHANGE)
	. = ..()

/obj/item/mech_equipment/ballistic_shield/afterattack(atom/target, mob/living/user, inrange, params)
	. = ..()
	if (.)
		if (user.a_intent == INTENT_HARM)
			if (last_push + 1.6 SECONDS < world.time)
				owner.changeNext_move(0.7 SECONDS)
				last_push = world.time
				owner.visible_message(span_warning("\The [owner] slams the area in front \the [src]!"), blind_message = span_warning("You hear a loud hiss and feel a strong gust of wind!"))
				playsound(src ,'sound/effects/bang.ogg',35,1)
				var/list/turfs = list()
				var/front = get_step(get_turf(owner), owner.dir)
				turfs += front
				turfs += get_step(front, turn(owner.dir, -90))
				turfs += get_step(front, turn(owner.dir,  90))
				for(var/turf/T in turfs)
					for(var/mob/living/M in T)
						if (!M.Adjacent(owner))
							continue
						M.apply_damage(damage = (owner.arms ? owner.arms.melee_damage * 0.2 : 0))
						M.throw_at(get_edge_target_turf(owner ,owner.dir),5, 2)

/obj/item/mech_equipment/ballistic_shield/attack_self(mob/user)
	. = ..()
	if (.) //FORM A SHIELD WALL!
		if (last_max_block + 2 SECONDS < world.time)
			owner.visible_message(span_warning("\The [owner] raises \the [src], locking it in place!"), blind_message = span_warning("You hear the whir of motors and scratching metal!"))
			playsound(src ,'sound/effects/bamf.ogg',35,1)
			owner.changeNext_move(0.8 SECONDS)
			blocking = TRUE
			last_max_block = world.time
			do_after(owner, 0.75 SECONDS, get_turf(user))
			blocking = FALSE
		else
			to_chat(user, span_warning("You are not ready to block again!"))

/obj/item/mech_equipment/ballistic_shield/proc/block_chance(damage, pen, atom/source, mob/attacker)
	if (damage > max_block || pen > max_block)
		return 0
	else
		var/effective_block = blocking ? chance * 1.5 : chance

		var/conscious_pilot_exists = FALSE
		for (var/mob/living/pilot in owner.pilots)
			if (!pilot.incapacitated())
				conscious_pilot_exists = TRUE
				break

		if (!conscious_pilot_exists)
			effective_block *= 0.5 //Who is going to block anything?

		//Bit copypasta but I am doing something different from normal shields
		var/attack_dir = 0
		if (istype(source, /obj/projectile))
			var/obj/projectile/P = source
			attack_dir = get_dir(get_turf(src), P.starting)
		else if (attacker)
			attack_dir = get_dir(get_turf(src), get_turf(attacker))
		else if (source)
			attack_dir = get_dir(get_turf(src), get_turf(source))

		if (attack_dir == turn(owner.dir, -90) || attack_dir == turn(owner.dir, 90))
			effective_block *= 0.8
		else if (attack_dir == turn(owner.dir, 180))
			effective_block = 0

		return effective_block

/obj/item/mech_equipment/ballistic_shield/proc/on_block_attack()
	if (blocking)
		//Reset timer for maximum chainblocks
		last_max_block = 0

/obj/item/mech_equipment/ballistic_shield/proc/update_dir(datum/source, old_dir, new_dir)
	if(istype(loc, /mob/living/exosuit))
		aura.setDir(new_dir)

/obj/aura/mech_ballistic
	icon = 'modular_pentest/modules/bay_mech/icons/ballistic_shield.dmi'
	name = "mech_ballistic_shield"
	var/obj/item/mech_equipment/ballistic_shield/shield = null
	layer = MECH_UNDER_LAYER
	mouse_opacity = 0

/obj/aura/mech_ballistic/Initialize(maploading, obj/item/mech_equipment/ballistic_shield/holder)
	. = ..()
	shield = holder

	//Get where we are attached so we know what icon to use
	if (holder && holder.owner)
		var/mob/living/exosuit/E = holder.owner
		for (var/hardpoint in E.hardpoints)
			var/obj/item/mech_equipment/hardpoint_object = E.hardpoints[hardpoint]
			if (holder == hardpoint_object)
				icon_state = "mech_shield_[hardpoint]"
				var/image/I = image(icon, "[icon_state]_over")
				I.layer = ABOVE_MOB_LAYER
				add_overlay(I)

/obj/aura/mech_ballistic/added_to(mob/living/target)
	. = ..()
	target.vis_contents += src
	setDir()
	//GLOB.dir_set_event.register(user, src, /obj/aura/mech_ballistic/proc/update_dir)

/obj/aura/mech_ballistic/proc/update_dir(user, old_dir, dir)
	setDir(dir)

/obj/aura/mech_ballistic/Destroy()
	if (user)
		//GLOB.dir_set_event.unregister(user, src, /obj/aura/mech_ballistic/proc/update_dir)
		user.vis_contents -= src
	shield = null
	. = ..()

/obj/aura/mech_ballistic/aura_check_bullet(obj/projectile/proj, def_zone)
	. = ..()
	if (shield && prob(shield.block_chance(proj.damage, proj.armour_penetration, source = proj)))
		user.visible_message(span_warning("\The [proj] is blocked by \the [user]'s [shield]."))
		qdel(proj)
		//user.bullet_impact_visuals(proj, def_zone, 0)
		return AURA_FALSE|AURA_CANCEL

/obj/aura/mech_ballistic/aura_check_thrown(atom/movable/thrown_atom, datum/thrownthing/thrown_datum)
	. = ..()
	if (shield)
		var/throw_damage = 0
		if (isobj(thrown_atom))
			var/obj/object = thrown_atom
			throw_damage = object.throwforce * thrown_datum.speed

		if (prob(shield.block_chance(throw_damage, 0, source = thrown_atom, attacker = thrown_datum.thrower)))
			user.visible_message(span_warning("\The [thrown_atom] bounces off \the [user]'s [shield]."))
			playsound(user.loc, 'sound/weapons/Genhit.ogg', 50, 1)
			return AURA_FALSE|AURA_CANCEL

/obj/aura/mech_ballistic/aura_check_weapon(obj/item/weapon, mob/attacker, click_params)
	. = ..()
	if (shield && prob(shield.block_chance(weapon.force, weapon.armour_penetration, source = weapon, attacker = user)))
		user.visible_message(span_warning("\The [weapon] is blocked by \the [user]'s [shield]."))
		playsound(user.loc, 'sound/weapons/Genhit.ogg', 50, TRUE)
		return AURA_FALSE|AURA_CANCEL


/obj/item/mech_equipment/mounted_system/melee
	restricted_hardpoints = list(HARDPOINT_LEFT_HAND, HARDPOINT_RIGHT_HAND)
	//restricted_software = list(MECH_SOFTWARE_UTILITY)

/obj/item/melee/sabre/mech
	name = "mechete"
	desc = "That thing was too big to be called a sword. Too big, too thick, too heavy, and too rough, it was more like a large hunk of iron."
	w_class = WEIGHT_CLASS_GIGANTIC
	slot_flags = 0
	force = 40 // If we want to edit the force, use this number! The one below is prone to be changed when anything material gets modified.

/obj/item/melee/sabre/mech/afterattack(atom/target, mob/living/user, inrange, params)
	. = ..()

	do_attack_animation(target, "smash")
	if(istype(target, /mob/living))
		var/mob/living/targ = target
		if (targ.mob_size <= user.mob_size) //Damaging attacks overwhelm smaller mobs
			targ.throw_at(get_edge_target_turf(target,get_dir(user, target)),1, 1)

/obj/item/melee/sabre/mech/attack_self(mob/living/user)
	. = ..()
	if (user.a_intent != INTENT_HARM)
		return
	var/obj/item/mech_equipment/mounted_system/melee/mechete/MC = loc
	if (istype(MC))
		//SPIN BLADE ATTACK GO!
		var/mob/living/exosuit/E = MC.owner
		if (E)
			E.changeNext_move(1.35 SECONDS)
			E.visible_message(span_danger("\The [E] swings \the [src] back, preparing for an attack!"), blind_message = span_warning("You hear the loud hissing of hydraulics!"))
			//playsound(E, 'sound/mecha/mech_punch_fast.ogg', 35, 1)
			for (var/mob/living/M in orange(1, E))
				src.melee_attack_chain(E, M)
				E.spin(0.65 SECONDS, 0.125 SECONDS)
				//playsound(E, 'sound/mecha/mechstep01.ogg', 40, 1)

/obj/item/mech_equipment/mounted_system/melee/mechete
	icon_state = "mech_blade"
	holding_type = /obj/item/melee/sabre/mech


