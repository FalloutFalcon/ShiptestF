

// Big stompy robots.
/mob/living/exosuit
	name = "exosuit"
	desc = "A powerful machine piloted from a cockpit, but worn like a suit of armour."
	density =  TRUE
	move_force = MOVE_FORCE_STRONG
	move_resist = MOVE_FORCE_OVERPOWERING
	pixel_x = -8
	pixel_y = 0
	var/default_pixel_x = -8
	var/default_pixel_y = 0
	a_intent =     INTENT_HARM
	mob_size =     MOB_SIZE_LARGE
	var/obj/item/stack/sheet/material = null
	var/emp_damage = 0
	var/can_move = 0 //next allowed movement
	var/obj/item/radio/mech/radio

	var/wreckage_path = /obj/structure/mech_wreckage

	// Access updating/container.
	var/obj/item/card/id/access_card
	var/list/saved_access = list()
	var/sync_access = 1

	// Mob currently piloting the exosuit.
	var/list/pilots
	var/list/pilot_overlays

	// Visible external components. Not strictly accurately named for non-humanoid machines (submarines) but w/e
	var/obj/item/mech_component/manipulators/arms
	var/obj/item/mech_component/propulsion/legs
	var/obj/item/mech_component/sensors/head
	var/obj/item/mech_component/chassis/body

	// Invisible components.
	var/datum/effect_system/spark_spread


	// Equipment tracking vars.
	var/obj/item/mech_equipment/selected_system
	var/selected_hardpoint
	var/list/hardpoints = list()
	var/hardpoints_locked
	var/maintenance_protocols
	var/swapping_weapon = FALSE

	// Material
	var/obj/item/stack/sheet/mineral/mineral

	//sparks
	var/datum/effect_system/spark_spread/sparks

	// Cockpit access vars.
	var/hatch_closed = FALSE
	var/hatch_locked = FALSE

	//Air!
	var/use_air      = FALSE

	//blind flag
	var/blind_flag
	// Interface stuff.
	var/list/hud_elements = list()
	var/list/hardpoint_hud_elements = list()
	var/obj/screen/exosuit/health/hud_health
	var/obj/screen/exosuit/toggle/hatch_open/hud_open
	var/obj/screen/exosuit/power/hud_power
	var/obj/screen/exosuit/heat/hud_heat
	var/obj/screen/exosuit/toggle/power_control/hud_power_control
	var/obj/screen/exosuit/toggle/camera/hud_camera

	//POWER
	var/power = MECH_POWER_OFF

	var/datum/armor/armor
	// Sounds for mech_movement.dm and mech_interaction.dm are stored on legs.dm and arms.dm, respectively

/mob/living/exosuit/proc/MayZoom()
	if(head?.vision_flags)
		return FALSE
	return TRUE

/*
/mob/living/exosuit/isSynthetic()
	return TRUE
*/
/mob/living/exosuit/Initialize(mapload, obj/structure/heavy_vehicle_frame/source_frame)
	. = ..()

	//if(!access_card) access_card = new (src)

	pixel_x = default_pixel_x
	pixel_y = default_pixel_y
	sparks = new(src)
	ADD_TRAIT(src, TRAIT_FAKEDEATH, INNATE_TRAIT)
	// Grab all the supplied components.
	if(source_frame)
		if(source_frame.set_name)
			name = source_frame.set_name
		if(source_frame.arms)
			source_frame.arms.forceMove(src)
			arms = source_frame.arms
		if(source_frame.legs)
			source_frame.legs.forceMove(src)
			legs = source_frame.legs
		if(source_frame.head)
			source_frame.head.forceMove(src)
			head = source_frame.head
		if(source_frame.body)
			source_frame.body.forceMove(src)
			body = source_frame.body
		if(source_frame.material)
			material = source_frame.material

		if(body.m_armour.armor)
			armor = body.m_armour.armor

	updatehealth()

	// Generate hardpoint list.
	var/list/component_descriptions
	for(var/obj/item/mech_component/comp in list(arms, legs, head, body))
		if(comp.exosuit_desc_string)
			LAZYADD(component_descriptions, comp.exosuit_desc_string)
		if(LAZYLEN(comp.has_hardpoints))
			for(var/hardpoint in comp.has_hardpoints)
				hardpoints[hardpoint] = null

	if(head && head.radio)
		radio = new(src)

	if(LAZYLEN(component_descriptions))
		desc = "[desc] It has been built with [english_list(component_descriptions)]."

	// Build icon.
	update_icon()
	prepare_huds()
	AddComponent(/datum/component/mech_autofire,0.5)

/mob/living/exosuit/Destroy()

	selected_system = null
	REMOVE_TRAIT(src, TRAIT_FAKEDEATH, INNATE_TRAIT)
	for (var/mob/pilot as anything in pilots)
		remove_pilot(pilot)
	QDEL_NULL(hud_health)
	QDEL_NULL(hud_open)
	QDEL_NULL(hud_power)
	QDEL_NULL(hud_power_control)
	QDEL_NULL(hud_camera)
	QDEL_NULL(radio)
	for(x in hud_elements)
		if(istype(x, /obj/screen/exosuit))
			var/obj/screen/exosuit/to_delete = x
			to_delete.owner = null
		x = null
	hud_elements = null
	for (var/hardpoint in hardpoints)
		qdel(hardpoints[hardpoint])
	hardpoints.Cut()
	hardpoints = null

	QDEL_NULL(access_card)
	QDEL_NULL(arms)
	QDEL_NULL(legs)
	QDEL_NULL(head)
	QDEL_NULL(body)

	for(var/hardpoint in hardpoint_hud_elements)
		var/obj/screen/exosuit/hardpoint/H = hardpoint_hud_elements[hardpoint]
		H.owner = null
		H.holding = null
		qdel(H)
	hardpoint_hud_elements.Cut()
	hardpoint_hud_elements = null

	. = ..()

/mob/living/exosuit/IsAdvancedToolUser()
	return TRUE

/mob/living/exosuit/examine(mob/user)
	var/init_desc = desc
	if(LAZYLEN(pilots) && (!hatch_closed || body.pilot_coverage < 100 || body.transparent_cabin))
		desc += "It is being piloted by [english_list(pilots, nothing_text = "nobody")]. \n"
	if(body && LAZYLEN(body.pilot_positions))
		desc += "It can seat [length(body.pilot_positions)] pilot\s total. \n"
	if(length(hardpoints))
		desc += "It has the following hardpoints: \n"
		for(var/hardpoint in hardpoints)
			var/obj/item/I = hardpoints[hardpoint]
			desc += "- [hardpoint]: [istype(I) ? "[I]" : "nothing"]. \n"
	else
		desc += "It has no visible hardpoints. \n"

	for(var/obj/item/mech_component/thing in list(arms, legs, head, body))
		if(!thing)
			continue

		var/damage_string = thing.get_damage_string()
		desc += "Its [thing.name] [thing.gender == PLURAL ? "are" : "is"] [damage_string]. \n"

	desc += "It menaces with reinforcements of [material.name]. \n"
	. = ..()
	desc = init_desc

/*
/mob/living/exosuit/GetIdCard()
	return access_card
*/
/mob/living/exosuit/setDir()
	. = ..()
	if(.)
		update_pilots()

/mob/living/exosuit/proc/toggle_power(mob/user)
	if(power == MECH_POWER_TRANSITION)
		to_chat(user, span_notice("Power transition in progress. Please wait."))
	else if(power == MECH_POWER_ON) //Turning it off is instant
		playsound(src, 'sound/mecha/nominal.ogg', 100, 0)
		power = MECH_POWER_OFF
	else if(get_cell(TRUE))
		//Start power up sequence
		power = MECH_POWER_TRANSITION
		playsound(src, 'sound/mecha/nominal.ogg', 50, 0)
		if(do_after(user, 3 SECONDS, src) && power == MECH_POWER_TRANSITION)
			playsound(src, 'sound/mecha/nominal.ogg', 50, 0)
			power = MECH_POWER_ON
		else
			to_chat(user, span_warning("You abort the powerup sequence."))
			power = MECH_POWER_OFF
		hud_power_control.update_icon()
	else
		to_chat(user, span_warning("Error: No power cell was detected."))

/mob/living/exosuit/proc/occupant_message(message as text)
	for(x in pilots)
		to_chat(pilots, "[icon2html(src, pilots)] [message]")


/mob/living/exosuit/get_cell(force)
	RETURN_TYPE(/obj/item/stock_parts/cell)
	if(power == MECH_POWER_ON || force) //For most intents we can assume that a powered off exosuit acts as if it lacked a cell
		return body ? body.cell : null
	return null

/mob/living/exosuit/proc/toggle_hatch()
	if(hatch_closed)
		hatch_closed = FALSE
	else
		hatch_closed = TRUE


/mob/living/exosuit/proc/clickat(atom/target,mob/user,params)
	return

/////////////////////////////////////
////////  Atmospheric stuff  ////////
/////////////////////////////////////

/mob/living/exosuit/remove_air(amount)
	if(hatch_closed && body.pilot_coverage >= 100)
		return body.cockpit.remove(amount)
	return ..()

/mob/living/exosuit/remove_air_ratio(ratio)
	if(hatch_closed && body.pilot_coverage >= 100)
		return body.cockpit.remove_ratio(ratio)
	return ..()

/mob/living/exosuit/return_air()
	if(hatch_closed && body.pilot_coverage >= 100)
		return body.cockpit
	return ..()

/mob/living/exosuit/return_analyzable_air()
	return body.cockpit

/mob/living/exosuit/proc/return_pressure()
	var/datum/gas_mixture/t_air = return_air()
	if(t_air)
		. = t_air.return_pressure()

/mob/living/exosuit/return_temperature()
	var/datum/gas_mixture/t_air = return_air()
	if(t_air)
		. = t_air.return_temperature()

/mob/living/exosuit/proc/has_charge(amount)
	return (body.cell.charge >=amount)

/mob/living/exosuit/proc/autofire_check()
	if(istype(selected_system,/obj/item/mech_equipment/weapon))
		var/obj/item/mech_equipment/weapon/mech_gun = selected_system
		if(mech_gun.automatic)
			SEND_SIGNAL(src,COMSIG_MECH_ENABLE_AUTOFIRE)
			SEND_SIGNAL(src,COMSIG_MECH_SET_AUTOFIRE_SPEED, mech_gun.equipment_delay)
		else
			SEND_SIGNAL(src,COMSIG_MECH_DISABLE_AUTOFIRE)
	else
		SEND_SIGNAL(src,COMSIG_MECH_DISABLE_AUTOFIRE)
